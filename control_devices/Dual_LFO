/* 
 * Pin A0 = Speed 
 * Pin A1 = Shape 
 * 
 * Pin 5 = PWM Out 
 * Pin 13 = LED / Square Out 
 */ 

// Declaring some Variables. All are unsigned, since you don't really need negative going values for now.
unsigned int delayTime;      
unsigned int shapeA;
unsigned int shapeB; 
uint8_t tableStepA; //8-Bit unsigned integer, so it can only store a value between 0 and 255
uint8_t tableStepB; //8-Bit unsigned integer, so it can only store a value between 0 and 255

unsigned long time_A_previous = 0; //used to determine if LFO A should advance to next step
unsigned long time_B_previous = 0; //used to determine if LFO A should advance to next step

uint8_t waveTable[4][256] ={{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,    // These are your Wavetables. fill them with Values for your desired Waveshape. 
                             0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,    // You could alco precalculate the Waveshape in Setup, see below 
                             0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 
                             0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 
                             0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 
                             0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 
                             0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 
                             0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}, 
                              
                            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,      
                             0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,    
                             0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 
                             0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 
                             0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 
                             0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 
                             0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 
                             0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}, 
                              
                            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,    
                             0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,    
                             0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 
                             0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 
                             0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 
                             0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 
                             0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 
                             0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}, 
                              
                            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,      
                             0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,    
                             0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 
                             0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 
                             0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 
                             0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 
                             0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 
                             0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}}; 
                          
void setup() {  
  
  for(int i=0; i<129; i++) {    // Precalculates a simple Tri-Wavetable in the first wavetable. 
    waveTable[0][i]=i*2;        // Delete these 2 'for loops' if you have filled up your wavetables 
    } 
  for(int i=0; i<128; i++)  {   
    waveTable[0][i+128]=256-i*2; 
  } 
  waveTable[0][128]=255; //256 was overflowing to "0" for step 128 above
  
  pinMode(5, OUTPUT);           // Sets Pin 5 as your PWM-Output 
  pinMode(13, OUTPUT);          // And Pin 13 as LED for Tempo, you can also use this as a square-LFO 

  Serial.begin(9600);
} 



void loop() { 

  /*
  if(tableStepA<128) {          // Turn LED on for first half of the cycle, indicate Tempo 
    digitalWrite(13, HIGH); 
  } 
    else {                       // Turn it off for the second half 
      digitalWrite (13, LOW); 
    } 
  */
  //Get the current time
  unsigned long current_time = millis();

  //record & map pot values to control the rates of LFOs
  int pot_value_A = analogRead(A0);
  int LFO_A_rate = map(pot_value_A, 0, 1023, 1, 100); //1-100 microsecords
  int pot_value_B = analogRead(A1);
  int LFO_B_rate = map(pot_value_B, 0, 1023, 1, 100); //1-100 microsecords
  
  shapeA = (analogRead(A2) >> 8);   // Reads the voltage at pin A2 and divides by 256 to get a Value between 0 and 3 to select the waveshape. 
  shapeB = (analogRead(A3) >> 8);   // Reads the voltage at pin A3 and divides by 256 to get a Value between 0 and 3 to select the waveshape. 

  //LFO A
  if((current_time - time_A_previous) > LFO_A_rate){ //once a certain amount of time passes, advance the table step and write the value
    analogWrite(5, waveTable[shapeA][tableStepA]);              // Writes the value at the current step in the table to Pin 5 as PWM-Signal.  
    tableStepA++;      // Jumps to the next step for LFO A 
    }

  //LFO B
  if((current_time - time_A_previous) > LFO_B_rate){ //once a certain amount of time passes, advance the table step and write the value
    analogWrite(5, waveTable[shapeB][tableStepB]);              // Writes the value at the current step in the table to Pin 5 as PWM-Signal.  
    tableStepB++;      // Jumps to the next step for LFO B 
    }

  Serial.print("Table Step = ");
  Serial.print(tableStepA);
  Serial.print("    LFO Value = ");
  Serial.println(waveTable[shapeA][tableStepA]);
}
