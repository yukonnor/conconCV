/* NOTES ABOUT SKETCH:
 * Code to support a CV/Gate control surface with: 
 * - two 'trigger' controls (X/Y) and one mono output for each
 * - two 'cv level' controls (A/B) and one mono output for each
 * -- 'high' level cv is good around ~4.5V (wobble bug peaks 9V)
 *
 * Sliders (A & B): 
 * - Sets external CV of 0V to 4V (?) based on finger position (gradient)
 * - Maintains level of A/B when removing finger
 * - Indicates level of A/B sliders via A/B LED brightness
 * 
 * Gates (X & Y):
 * - Sets external CV: 0V or 4V (on-off) based on whether or not finger is touching pad
 * 
 * TODO:
 * - Prevent bleeding between A & B (b is bleeding to a, a IS NOT bleeding to b). Maybe try to decrease B resistor value?
 * - Add code to "maintain" values when finger leaves on A & B sensors
 * 
 * NOTES ABOUT CapacitiveSensor:
 * Uses a high value resistor e.g. 10 megohm between send pin and receive pin
 * Resistor effects sensitivity, experiment with values, 50 kilohm - 50 megohm. Larger resistor values yield larger sensor values.
 * Receive pin is the sensor pin - try different amounts of foil/metal on this pin
 * Best results are obtained if sensor foil and wire is covered with an insulator such as paper or plastic sheet
 */
#include <Wire.h> //I2C for DACs
#include <Adafruit_MCP4725.h> //I2C for DACs
#include <CapacitiveSensor.h>

Adafruit_MCP4725 dac; //rename library
#define DAC_RESOLUTION    (8) //8-bit resolution


CapacitiveSensor   cs_x = CapacitiveSensor(2,3);        // 470K resistor between pins 2 & 4, pin 4 is sensor pin, add wire, foil
CapacitiveSensor   cs_y = CapacitiveSensor(2,4);        // 470K resistor between pins 2 & 5, pin 5 is sensor pin, add wire, foil
CapacitiveSensor   cs_a = CapacitiveSensor(5,6);        // 470K resistor between pins 5 & 6, pin 6 is sensor pin, add wire, foil
CapacitiveSensor   cs_b = CapacitiveSensor(8,7);      // 470K resistor between pins 8 & 7, pin 7 is sensor pin

//Define LED Variables
const int ledPin_A = 9;         // the PWM pin the LED for A is attached to
const int ledPin_B = 10;        // the PWM pin the LED for A is attached to
int brightness_A = 0;           //  how bright the LED for A is. Should be between 0 - 255
int brightness_B = 0;  

//Define Smoothing Variables
const int numReadings = 10;
int readings_a[numReadings];      // array of the readings from the analog input
int readings_b[numReadings]; 
int readIndex_a = 0;              // the index of the current reading
int readIndex_b = 0;
int total_a = 0;                  // the running total
int total_b = 0; 
int average_reading_a = 0;        // the average
int average_reading_b = 0; 

void setup()                    
{
  // declare LED pins to be outputs:
  pinMode(ledPin_A, OUTPUT);
  pinMode(ledPin_B, OUTPUT);

   //Smoothing - initialize all the readings to 0:
  for (int thisReading = 0; thisReading < numReadings; thisReading++) {
      readings_a[thisReading] = 0;
  }
  
  for (int thisReading = 0; thisReading < numReadings; thisReading++) {
      readings_b[thisReading] = 0;
  }

  //Serial baby
  Serial.begin(9600);

  dac.begin(0x60);
  dac.setVoltage(0,false);
  
  dac.begin(0x61);
  dac.setVoltage(0,false);

}

void loop()                    
{
    //Define CapSense variables and readings  
    long start = millis();
    long cap_reading_x =  cs_x.capacitiveSensor(30); //on-off based on logic below
    long cap_reading_y =  cs_y.capacitiveSensor(30); //on-off based on logic below
    long cap_reading_a =  cs_a.capacitiveSensor(30); //0 - 600 with 470K resistor
    long cap_reading_b =  cs_b.capacitiveSensor(30); //0 - 680 with 470K resistor (maybe try to decrease?)
    
    //Smooth A & B Values
    cap_reading_a = Smooth_A(cap_reading_a); //A reading is now smoothed
    cap_reading_b = Smooth_B(cap_reading_b); //B reading is now smoothed

    //Logic for X & Y On Off
    cap_reading_x = On_Off_Threshold(cap_reading_x, 140); //if x is > 140, it is HIGH. Else LOW.
    cap_reading_y = On_Off_Threshold(cap_reading_y, 140); 



    //Serial.print("Millis = ");
    //Serial.print(millis() - start);           // check on performance in milliseconds
    Serial.print("\t");
    Serial.print("X Touch = ");
    Serial.print(cap_reading_x);              // print sensor X
    Serial.print("\t");
    Serial.print("Y Touch = ");
    Serial.print(cap_reading_y);              // print sensor Y
    Serial.print("\t");
    Serial.print("A Touch = ");
    Serial.print(cap_reading_a);              // print sensor A
    Serial.print("\t");
    Serial.print("Brightness A = ");
    Serial.print(brightness_A);               // print brightness
    Serial.print("\t");
    Serial.print("B Touch = ");
    Serial.print(cap_reading_b);              // print sensor B
    Serial.print("\t");
    Serial.print("Brightness B = ");
    Serial.print(brightness_B);
    Serial.println("\t");

    delay(100);                             // arbitrary delay to limit data to serial port 

    //SET THOSE DAC OUTPUT VALUES!
    
    //First Map Cap Readings to DAC Input values
    //0V Output = 0 - 5V Output = 4095
    unsigned int dac_0_out = map(cap_reading_a, 0, 800, 0, 4095);  
    unsigned int dac_1_out = map(cap_reading_b, 0, 800, 0, 4095); 
    
    dac.begin(0x60);
    dac.setVoltage(dac_0_out, false);
    dac.begin(0x61);
    dac.setVoltage(dac_1_out, false);
    //END DACs

    //light up those LEDs!
    brightness_A = map(cap_reading_a, 0, 800, 0, 150); //map the captouch A to led's brightness. 0 off, 255 max bright  
    if (brightness_A < 5) {
      brightness_A = 0;
    }

    brightness_B = map(cap_reading_b, 0, 800, 0, 150); //map the captouch A to led's brightness. 0 off, 255 max bright  
    if (brightness_B < 5) {
      brightness_B = 0;
    }
    analogWrite(ledPin_A, brightness_A);
    analogWrite(ledPin_B, brightness_B);
    // end LEDS
    
} //end Loop


int Smooth_A(int dirty_reading) {
  //Be sure to include global variables and intializer in setup()
  
  // subtract the last reading:
  total_a = total_a - readings_a[readIndex_a];
  // read from the sensor:
  readings_a[readIndex_a] = dirty_reading;
  // add the reading to the total:
  total_a = total_a + readings_a[readIndex_a];
  // advance to the next position in the array:
  readIndex_a = readIndex_a + 1;

  // if we're at the end of the array...
  if (readIndex_a >= numReadings) {
    // ...wrap around to the beginning:
    readIndex_a = 0;
    }
  // calculate the average:
  average_reading_a = total_a / numReadings;

  return average_reading_a;

} //end Smooth_A 

int Smooth_B(int dirty_reading) {
  //Be sure to include global variables and intializer in setup()
  
  // subtract the last reading:
  total_b = total_b - readings_b[readIndex_b];
  // read from the sensor:
  readings_b[readIndex_b] = dirty_reading;
  // add the reading to the total:
  total_b = total_b + readings_b[readIndex_b];
  // advance to the next position in the array:
  readIndex_b = readIndex_b + 1;

  // if we're at the end of the array...
  if (readIndex_b >= numReadings) {
    // ...wrap around to the beginning:
    readIndex_b = 0;
    }
  // calculate the average:
  average_reading_b = total_b / numReadings;

  return average_reading_b;

} //end Smooth_A 


boolean On_Off_Threshold(int on_off, int threshold) {

      if (on_off < threshold){
        on_off = LOW;
        }
        else {
        on_off = HIGH;  
        }

      return on_off;  
}
